-- Create tables for Loop Social platform

-- Profiles table (extends Supabase Auth users)
create table profiles (
  id uuid references auth.users on delete cascade primary key,
  full_name text,
  avatar_url text,
  title text,
  location text,
  about text,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Groups table
create table groups (
  id bigint generated by default as identity primary key,
  name text not null,
  description text,
  category text,
  image text,
  created_by uuid references profiles(id),
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Group members junction table
create table group_members (
  id bigint generated by default as identity primary key,
  group_id bigint references groups(id) on delete cascade,
  user_id uuid references profiles(id) on delete cascade,
  role text default 'member',
  joined_at timestamp with time zone default now(),
  unique(group_id, user_id)
);

-- Posts table
create table posts (
  id bigint generated by default as identity primary key,
  content text not null,
  user_id uuid references profiles(id) on delete cascade,
  group_id bigint references groups(id) on delete cascade,
  group_name text,
  likes_count integer default 0,
  comments_count integer default 0,
  shares_count integer default 0,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Post likes junction table
create table post_likes (
  id bigint generated by default as identity primary key,
  post_id bigint references posts(id) on delete cascade,
  user_id uuid references profiles(id) on delete cascade,
  created_at timestamp with time zone default now(),
  unique(post_id, user_id)
);

-- Comments table
create table comments (
  id bigint generated by default as identity primary key,
  content text not null,
  post_id bigint references posts(id) on delete cascade,
  user_id uuid references profiles(id) on delete cascade,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Jobs table
create table jobs (
  id bigint generated by default as identity primary key,
  title text not null,
  company_name text not null,
  company_logo text,
  location text,
  job_type text,
  salary text,
  description text,
  requirements text[],
  posted_by uuid references profiles(id),
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Job applications junction table
create table job_applications (
  id bigint generated by default as identity primary key,
  job_id bigint references jobs(id) on delete cascade,
  user_id uuid references profiles(id) on delete cascade,
  status text default 'applied',
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now(),
  unique(job_id, user_id)
);

-- Job bookmarks junction table
create table job_bookmarks (
  id bigint generated by default as identity primary key,
  job_id bigint references jobs(id) on delete cascade,
  user_id uuid references profiles(id) on delete cascade,
  created_at timestamp with time zone default now(),
  unique(job_id, user_id)
);

-- Create RLS policies
alter table profiles enable row level security;
alter table groups enable row level security;
alter table group_members enable row level security;
alter table posts enable row level security;
alter table post_likes enable row level security;
alter table comments enable row level security;
alter table jobs enable row level security;
alter table job_applications enable row level security;
alter table job_bookmarks enable row level security;

-- Profiles policies
create policy "Public profiles are viewable by everyone."
  on profiles for select
  using (true);

create policy "Users can insert their own profile."
  on profiles for insert
  with check (auth.uid() = id);

create policy "Users can update their own profile."
  on profiles for update
  using (auth.uid() = id);

-- Groups policies
create policy "Groups are viewable by everyone."
  on groups for select
  using (true);

create policy "Authenticated users can create groups."
  on groups for insert
  with check (auth.role() = 'authenticated');

create policy "Group creators can update their groups."
  on groups for update
  using (auth.uid() = created_by);

-- Group members policies
create policy "Group memberships are viewable by everyone."
  on group_members for select
  using (true);

create policy "Authenticated users can join groups."
  on group_members for insert
  with check (auth.role() = 'authenticated');

create policy "Users can leave groups."
  on group_members for delete
  using (auth.uid() = user_id);

-- Posts policies
create policy "Posts are viewable by everyone."
  on posts for select
  using (true);

create policy "Authenticated users can create posts."
  on posts for insert
  with check (auth.role() = 'authenticated');

create policy "Users can update their own posts."
  on posts for update
  using (auth.uid() = user_id);

create policy "Users can delete their own posts."
  on posts for delete
  using (auth.uid() = user_id);

-- Post likes policies
create policy "Post likes are viewable by everyone."
  on post_likes for select
  using (true);

create policy "Authenticated users can like posts."
  on post_likes for insert
  with check (auth.role() = 'authenticated');

create policy "Users can unlike posts."
  on post_likes for delete
  using (auth.uid() = user_id);

-- Create functions and triggers

-- Function to update post counts
create or replace function update_group_post_count()
returns trigger as $$
begin
  update groups
  set post_count = (select count(*) from posts where group_id = new.group_id)
  where id = new.group_id;
  return new;
end;
$$ language plpgsql;

-- Trigger for post count
create trigger update_group_post_count_trigger
after insert or delete on posts
for each row
execute function update_group_post_count();

-- Function to update member counts
create or replace function update_group_member_count()
returns trigger as $$
begin
  update groups
  set member_count = (select count(*) from group_members where group_id = new.group_id)
  where id = new.group_id;
  return new;
end;
$$ language plpgsql;

-- Trigger for member count
create trigger update_group_member_count_trigger
after insert or delete on group_members
for each row
execute function update_group_member_count();
